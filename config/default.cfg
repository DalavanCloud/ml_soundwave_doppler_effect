[audio]
#base frequency
frequency = 18500.0
amplitude = 1.
framerate = 48000
# duration for one signal, this is repeated while sound is on
duration = 30
buffersize = 2048

[record]
recordingFrames = 32
# how long is 1 record in seconds
secToRecord = 0.001  
# time between 2 records in seconds
recordIntervall = 0.01  
# in milliseconds
guiIntervall = 1.0  
# how many datapoints left of base frequency
leftBorder = 32.0
# how many datapoints right of base frequency
rightBorder = 32.0

[paths]
# Path to saved gestures
gesturePath = ../gestures

[user]
# use name of this application (used for individual gesture folder)
name = 
# default classifier to load on startup, if empty no one
classifier = 
# start soundplayer and recording at startup, if empty it is deactivated
autostart_sound = true

[os]
type =

[lstm]
# name to be appended by autosave network (will not be parsed on loading)
customname = 
# used classes
classes=[0,1,2,3,4,5,6,7]
# should classes 6 and 7 be treated as the same class?
merge67 = false
# name of dataset
dataset =
# load dataset from file, otherwise create new dataset
autoload_dataset = false
# load data in general or not
autoload_data = true
# save dataset after creation to file
autosave_dataset = true
# Loads data with diff of normalized data and average or only normalized data (false)
data_average = false
# Folds data in preprocess step
data_fold = 1
# Cuts data in preprocess step in front and back
data_cut = 0
#network name
network =
# basepath for saving and loading networks and data, you have to create subfolder 'networks' and 'data'
path = 
# load network from file, otherwise create new
autoload_network = false
# autosave the network after training to file: networkname + timestamp
autosave_network = false
# use peepholes in lstm network or not
peepholes = False
# number of LSTM Blocks
hiddenneurons = 18
# output layer activation function: linear, sigmoid, softmax
outlayer = linear
# default number of training epochs
trainingepochs = 100
# Training type: gradient based, optimization (experimental), crossval (experimental)
training = gradient
# Train Algorithm for training=(gradient or crossval): {rprop or backprop}; for training=(optimization): {GA, HillClimber, MemeticSearch, NelderMead, CMAES, OriginalNES, ES, MultiObjectiveGA}
trainingalgo = rprop


[svm]

[trees]


[keys]
# Key binding for class 0
key_0 = uinput.KEY_A
# Key binding for class 1
key_1 = uinput.KEY_B
# Key binding for class 2
key_2 = uinput.KEY_C
# Key binding for class 3
key_3 = uinput.KEY_D
# Key binding for class 4
key_4 = uinput.KEY_E
# Key binding for class 5
key_5 = uinput.KEY_F
# Key binding for class 6
key_6 = None
# Key binding for class 7
key_7 = None